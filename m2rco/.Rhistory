source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
setwd("~/Desktop/UROP-Stats/clean data")
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
View(df)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
View(df)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/codestats.R', echo=TRUE)
a
source('~/Desktop/UROP-Stats/codestats.R', echo=TRUE)
a
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
a
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
col
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
View(df)
View(df)
getSrcDirectory()
setwd(./)
setwd('./')
setwd("~/Desktop/UROP-Stats")
setwd('./')
getwd()
getActiveDocumentContext()$path)
getActiveDocumentContext()$path
setwd("~/Desktop/UROP-Stats/clean data")
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
View(df)
View(df)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
View(df)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
View(df)
length(df)
nrow(df)
df[2,]
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
View(df)
seq(3:1)
seq(3,1)
df[108,2:]
df[108,2:ncol(df)]
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/codestats.R', echo=TRUE)
a
source('~/Desktop/UROP-Stats/codestats.R', echo=TRUE)
a
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
install.packages('rjson')
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
a
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
a
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
df[1,1][1:10]
df[1,1]
str(df[1,1])
str(df[1,1])[1:10]
str(df[1,1])[1]
?substr
substr(df[1,1])
substr(df[1,1],1,10)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
a
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
a
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
cat(a)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
df[date,1]
df[date,]
df[1,1]
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
df[,1]
df[,2:3]
df[-1,]
df[,-c('Date')]
df[,-'Date']
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
json_df
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
date
dir.create(date)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
View(dailydf)
source('~/Desktop/UROP-Stats/clean data/Wisconsin_csv_to_json.R', echo=TRUE)
df = read.csv(dir)
View(df)
View(df)
source('~/Desktop/UROP-Stats/wisconsin/Wisconsin_csv_to_json.R', echo=TRUE)
setwd("~/Desktop/UROP-Stats/wisconsin")
source('~/Desktop/UROP-Stats/wisconsin/Wisconsin_csv_to_json.R', echo=TRUE)
View(df)
'
file to convert Wisconsin cumulative/daily death date to JSON format
change date and run this file to create directory and save .json
'
library(rjson)
# choose date
date = '2020/05/21'
# create working directory
datedir = paste('./', substr(date,1,4),':',substr(date,6,7), ':', substr(date,9,10), sep = '')
dir.create(datedir)
# read csv
dir = './COVID-19_Historical_Data_Table.csv'
df = read.csv(dir)
# select columns and create new column names
col = c()
newcol = c()
for (start_age in seq(0,80,by=10)){
col_name = paste('DTHS',start_age, start_age+9, sep = '_')
newcol_name = paste(start_age, '-', start_age+9, ' years', sep = '')
col = c(col, col_name)
newcol = c(newcol, newcol_name)
}
col = c('LoadDttm',col, 'DTHS_90')
newcol = c('Date', newcol, '90+ years')
df = df[df$GEOID == 55,col]
df[is.na(df)] = 0
colnames(df) = newcol
df
# deal with dates
for (row_num in seq(1,nrow(df))){
df[row_num, 'Date'] = substr(df[row_num, 'Date'],1,10)
}
df
# deal with dates
for (row_num in seq(1,nrow(df))){
df[row_num, 'Date'] = substr(df[row_num, 'Date'],1,10)
}
df
'
file to convert Wisconsin cumulative/daily death date to JSON format
change date and run this file to create directory and save .json
'
library(rjson)
# choose date
date = '2020/05/21'
# create working directory
datedir = paste('./', substr(date,1,4),':',substr(date,6,7), ':', substr(date,9,10), sep = '')
dir.create(datedir)
# read csv
dir = './COVID-19_Historical_Data_Table.csv'
df = read.csv(dir)
# select columns and create new column names
col = c()
newcol = c()
for (start_age in seq(0,80,by=10)){
col_name = paste('DTHS',start_age, start_age+9, sep = '_')
newcol_name = paste(start_age, '-', start_age+9, ' years', sep = '')
col = c(col, col_name)
newcol = c(newcol, newcol_name)
}
col = c('LoadDttm',col, 'DTHS_90')
newcol = c('Date', newcol, '90+ years')
df = df[df$GEOID == 55,col]
df[is.na(df)] = 0
colnames(df) = newcol
# deal with dates
for (row_num in seq(1,nrow(df))){
df[row_num, 'Date'] = substr(df[row_num, 'Date'],1,10)
}
df
df[row_num, 'Date'] = substr(df[row_num, 'Date'],1,10)
df
col = c('LoadDttm',col, 'DTHS_90')
# read csv
dir = './COVID-19_Historical_Data_Table.csv'
df = read.csv(dir)
# select columns and create new column names
col = c()
newcol = c()
for (start_age in seq(0,80,by=10)){
col_name = paste('DTHS',start_age, start_age+9, sep = '_')
newcol_name = paste(start_age, '-', start_age+9, ' years', sep = '')
col = c(col, col_name)
newcol = c(newcol, newcol_name)
}
debugSource('~/Desktop/UROP-Stats/wisconsin/Wisconsin_csv_to_json.R', echo=TRUE)
debugSource('~/Desktop/UROP-Stats/wisconsin/Wisconsin_csv_to_json.R', echo=TRUE)
source('~/Desktop/UROP-Stats/wisconsin/Wisconsin_csv_to_json.R', echo=TRUE)
datelist
source('~/Desktop/UROP-Stats/wisconsin/Wisconsin_csv_to_json.R', echo=TRUE)
df
source('~/Desktop/UROP-Stats/wisconsin/Wisconsin_csv_to_json.R', echo=TRUE)
json_df
json_df
date
df[date,]
df[56,]
df[80,]
df[100,]
df[150,]
df['23',]
version>
version?
?version
R.version
install.packages(c("abind", "data.table", "EnvStats", "gdata", "lubridate", "optparse"))
install.packages(c("abind", "data.table", "EnvStats", "gdata", "lubridate", "optparse"))
library(rstan)
library(data.table)
library(lubridate)
library(gdata)
library(dplyr)
library(tidyr)
library(EnvStats)
library(scales)
library(stringr)
library(abind)
library(scales)
library(zoo)
library(matrixStats)
library(optparse)
source('usa/code/utils/read-data-usa.r')
setwd("~/Desktop/UROP-Stats/M2R/Joezzb/m2rco")
source('usa/code/utils/read-data-usa.r')
setwd("~/Desktop/UROP-Stats/M2R/Joezzb/m2rco")
source('usa/code/utils/read-data-usa.r')
source('./usa/code/utils/read-data-usa.r')
source('usa/code/process-covariates.r')
`COVID-19-up-to-date` <- readRDS("/Users/liuhanyang/Desktop/UROP-Stats/M2R/Joezzb/m2rco/data/COVID-19-up-to-date.rds")
source('usa/code/utils/read-data-usa.r')
source('usa/code/process-covariates.r')
setwd(indir)
indir <- './'
setwd(indir)
# Deaths are from
# https://usafacts.org/visualizations/coronavirus-covid-19-spread-map/?utm_source=MailChimp&utm_campaign=census-covid2
infile.deaths <- file.path(indir,'covid_deaths_usafacts.csv')
# County Population is from
# https://usafacts.org/visualizations/coronavirus-covid-19-spread-map/?utm_source=MailChimp&utm_campaign=census-covid2
infile.pop <- file.path(indir,'covid_county_population_usafacts.csv')
#	read & select death data
dd <- as.data.table( read.csv(infile.deaths, stringsAsFactors=FALSE) )
setnames(dd,"ÿcountyFIPS",'countyFIPS')
View(dd)
dd <- melt(dd, id.vars=c('countyFIPS','County.Name','State','stateFIPS'), variable.name='DATE', value.name='CDEATHS')
setnames(dd, colnames(dd), gsub('\\.','_',toupper(colnames(dd))))
dd <- subset(dd, STATE=='CA')
dd <- subset(dd, COUNTYFIPS!=0 & !grepl('Cruise',COUNTY_NAME))
dd[, DATE:= gsub('^X','',DATE)]
dd[, DATE:= as.Date(DATE, format='%m.%d.%y')]
#	calculate deaths per day and add
tmp <- dd[, {
deaths <- CDEATHS[ 2:length(CDEATHS)]	- CDEATHS[ 1:(length(CDEATHS)-1)]
dates <- DATE[ 1:(length(CDEATHS)-1) ]
list(DATE=dates, DEATHS=deaths)
}, by='COUNTYFIPS']
dd <- merge(dd, tmp, by=c('COUNTYFIPS','DATE'), all.x=TRUE)
#	read county pop & merge with death data
dp <- as.data.table( read.csv(infile.pop, stringsAsFactors=FALSE) )
setnames(dp,"ÿcountyFIPS",'countyFIPS')
#luanma
setnames(dp, colnames(dp), gsub('\\.','_',toupper(colnames(dp))))
?setnames
#	read county pop & merge with death data
dp <- as.data.table( read.csv(infile.pop, stringsAsFactors=FALSE) )
# setnames(dp,"ÿcountyFIPS",'countyFIPS')
#luanma
setnames(dp, colnames(dp), gsub('\\.','_',toupper(colnames(dp))))
dd <- merge(dd, dp, by=c('STATE','COUNTYFIPS','COUNTY_NAME'))
#states<-county
code<-unique(dd$COUNTYFIPS)
states<-unique(dd$COUNTY_NAME)
statecode<-cbind(code,states)
colnames(statecode)<-c('code','sub_region_1')
#ifr county data
ifr_by_state <- read_ifr_data()
View(dd)
?read_ifr_data
?read_ifr_data()
